using System;

namespace FractionFunctionApp
{
    // üîπ –ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å ‚Äî –¥—Ä–æ–±–æ–≤–æ-–ª—ñ–Ω—ñ–π–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–¥—É (a1*x + a0) / (b1*x + b0)
    class FractionLinear
    {
        private double a1, a0, b1, b0;
        protected const double EPS = 1e-9; // –ø–æ—Ä—ñ–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å

        // üî∏ –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ (Properties)
        public double A1 { get => a1; set => a1 = value; }
        public double A0 { get => a0; set => a0 = value; }
        public double B1 { get => b1; set => b1 = value; }
        public double B0 { get => b0; set => b0 = value; }

        // üî∏ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        public FractionLinear() { }

        // üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        public FractionLinear(double a1, double a0, double b1, double b0)
        {
            A1 = a1;
            A0 = a0;
            B1 = b1;
            B0 = b0;
        }

        // üî∏ –ú–µ—Ç–æ–¥ –∑–∞–¥–∞–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤
        public virtual void SetCoefficients(double a1, double a0, double b1, double b0)
        {
            A1 = a1;
            A0 = a0;
            B1 = b1;
            B0 = b0;
        }

        // üî∏ –ú–µ—Ç–æ–¥ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –≤ —Ç–æ—á—Ü—ñ x0
        public virtual double Calculate(double x0)
        {
            double denominator = B1 * x0 + B0;

            if (Math.Abs(denominator) < EPS)
            {
                Console.WriteLine("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –∑–Ω–∞–º–µ–Ω–Ω–∏–∫ –Ω–∞–±–ª–∏–∂–µ–Ω–∏–π –¥–æ –Ω—É–ª—è!");
                return double.NaN;
            }

            return (A1 * x0 + A0) / denominator;
        }

        // üî∏ –ú–µ—Ç–æ–¥ –≤–∏–≤–µ–¥–µ–Ω–Ω—è (ToString)
        public override string ToString()
        {
            return $"f(x) = ({A1}x + {A0}) / ({B1}x + {B0})";
        }
    }

    // üîπ –ü–æ—Ö—ñ–¥–Ω–∏–π –∫–ª–∞—Å ‚Äî –¥—Ä–æ–±–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–¥—É (a2*x¬≤ + a1*x + a0) / (b2*x¬≤ + b1*x + b0)
    class FractionQuadratic : FractionLinear
    {
        private double a2, b2;

        public double A2 { get => a2; set => a2 = value; }
        public double B2 { get => b2; set => b2 = value; }

        // üî∏ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        public FractionQuadratic() { }

        // üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        public FractionQuadratic(double a2, double a1, double a0, double b2, double b1, double b0)
            : base(a1, a0, b1, b0)
        {
            A2 = a2;
            B2 = b2;
        }

        // üî∏ –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è SetCoefficients (–ø–æ–≤–Ω—ñ—Å—Ç—é —É–∑–≥–æ–¥–∂–µ–Ω–µ –∑ –±–∞–∑–æ–≤–∏–º)
        public override void SetCoefficients(double a2, double a1, double b2, double b1)
        {
            A2 = a2;
            A1 = a1;
            B2 = b2;
            B1 = b1;
        }

        // üî∏ –ü–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç SetCoefficients –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É
        public void SetCoefficients(double a2, double a1, double a0, double b2, double b1, double b0)
        {
            A2 = a2;
            A1 = a1;
            A0 = a0;
            B2 = b2;
            B1 = b1;
            B0 = b0;
        }

        // üî∏ –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –º–µ—Ç–æ–¥ Calculate
        public override double Calculate(double x0)
        {
            double denominator = B2 * x0 * x0 + B1 * x0 + B0;

            if (Math.Abs(denominator) < EPS)
            {
                Console.WriteLine("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –∑–Ω–∞–º–µ–Ω–Ω–∏–∫ –Ω–∞–±–ª–∏–∂–µ–Ω–∏–π –¥–æ –Ω—É–ª—è!");
                return double.NaN;
            }

            return (A2 * x0 * x0 + A1 * x0 + A0) / denominator;
        }

        // üî∏ –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è ToString
        public override string ToString()
        {
            return $"f(x) = ({A2}x¬≤ + {A1}x + {A0}) / ({B2}x¬≤ + {B1}x + {B0})";
        }
    }

    // üîπ –ì–æ–ª–æ–≤–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞
    class Program
    {
        static void Main(string[] args)
        {
            Console.Write("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ñ—É–Ω–∫—Ü—ñ—ó (1 ‚Äî –¥—Ä–æ–±–æ–≤–æ-–ª—ñ–Ω—ñ–π–Ω–∞, 2 ‚Äî –¥—Ä–æ–±–æ–≤–∞): ");
            char userChoose = Console.ReadKey().KeyChar;
            Console.WriteLine();

            FractionLinear func; // –ø–æ–∫–∞–∂—á–∏–∫ –Ω–∞ –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å

            if (userChoose == '1')
            {
                func = new FractionLinear(2, 3, 1, 4); // (2x + 3)/(1x + 4)
            }
            else if (userChoose == '2')
            {
                func = new FractionQuadratic(1, 2, 3, 2, 1, 4); // (x¬≤ + 2x + 3)/(2x¬≤ + x + 4)
            }
            else
            {
                Console.WriteLine("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä! –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
                return;
            }

            Console.WriteLine("\n" + func.ToString());

            Console.Write("\n–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è x0: ");
            if (!double.TryParse(Console.ReadLine(), out double x0))
            {
                Console.WriteLine("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è x0!");
                return;
            }

            double result = func.Calculate(x0);
            Console.WriteLine($"–†–µ–∑—É–ª—å—Ç–∞—Ç: f({x0}) = {result:F3}");
        }
    }
}
