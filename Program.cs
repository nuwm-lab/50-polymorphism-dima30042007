using System;

namespace FractionFunctionApp
{
    // üîπ –ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å ‚Äî –¥—Ä–æ–±–æ–≤–æ-–ª—ñ–Ω—ñ–π–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–¥—É (a1*x + a0) / (b1*x + b0)
    class FractionLinear
    {
        protected double a1, a0, b1, b0;

        // –ú–µ—Ç–æ–¥ –∑–∞–¥–∞–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤
        public virtual void SetCoefficients(double a1, double a0, double b1, double b0)
        {
            this.a1 = a1;
            this.a0 = a0;
            this.b1 = b1;
            this.b0 = b0;
        }

        // –ú–µ—Ç–æ–¥ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤
        public virtual void ShowCoefficients()
        {
            Console.WriteLine($"–§—É–Ω–∫—Ü—ñ—è: f(x) = ({a1}x + {a0}) / ({b1}x + {b0})");
        }

        // –ú–µ—Ç–æ–¥ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –≤ —Ç–æ—á—Ü—ñ x0
        public virtual double Calculate(double x0)
        {
            if (b1 * x0 + b0 == 0)
            {
                Console.WriteLine("–î—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å!");
                return double.NaN;
            }

            return (a1 * x0 + a0) / (b1 * x0 + b0);
        }
    }

    // üîπ –ü–æ—Ö—ñ–¥–Ω–∏–π –∫–ª–∞—Å ‚Äî –¥—Ä–æ–±–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–¥—É (a2*x¬≤ + a1*x + a0) / (b2*x¬≤ + b1*x + b0)
    class FractionQuadratic : FractionLinear
    {
        protected double a2, b2;

        // –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–¥–∞–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤
        public void SetCoefficients(double a2, double a1, double a0, double b2, double b1, double b0)
        {
            this.a2 = a2;
            this.a1 = a1;
            this.a0 = a0;
            this.b2 = b2;
            this.b1 = b1;
            this.b0 = b0;
        }

        // –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –º–µ—Ç–æ–¥ –≤–∏–≤–µ–¥–µ–Ω–Ω—è
        public override void ShowCoefficients()
        {
            Console.WriteLine($"–§—É–Ω–∫—Ü—ñ—è: f(x) = ({a2}x¬≤ + {a1}x + {a0}) / ({b2}x¬≤ + {b1}x + {b0})");
        }

        // –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –º–µ—Ç–æ–¥ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è
        public override double Calculate(double x0)
        {
            double denominator = b2 * x0 * x0 + b1 * x0 + b0;
            if (denominator == 0)
            {
                Console.WriteLine("–î—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å!");
                return double.NaN;
            }

            return (a2 * x0 * x0 + a1 * x0 + a0) / denominator;
        }
    }

    // üîπ –ì–æ–ª–æ–≤–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞
    class Program
    {
        static void Main(string[] args)
        {
            Console.Write("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ñ—É–Ω–∫—Ü—ñ—ó (1 ‚Äî –¥—Ä–æ–±–æ–≤–æ-–ª—ñ–Ω—ñ–π–Ω–∞, 2 ‚Äî –¥—Ä–æ–±–æ–≤–∞): ");
            char userChoose = Console.ReadKey().KeyChar;
            Console.WriteLine();

            FractionLinear func; // –ø–æ–∫–∞–∂—á–∏–∫ –Ω–∞ –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å

            if (userChoose == '1')
            {
                func = new FractionLinear();
                func.SetCoefficients(2, 3, 1, 4);  // –ù–∞–ø—Ä–∏–∫–ª–∞–¥: (2x + 3) / (1x + 4)
            }
            else
            {
                func = new FractionQuadratic();
                ((FractionQuadratic)func).SetCoefficients(1, 2, 3, 2, 1, 4); // (x¬≤ + 2x + 3) / (2x¬≤ + x + 4)
            }

            func.ShowCoefficients();

            Console.Write("\n–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è x0: ");
            double x0 = Convert.ToDouble(Console.ReadLine());

            double result = func.Calculate(x0);
            Console.WriteLine($"–ó–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó —É —Ç–æ—á—Ü—ñ x0 = {x0} –¥–æ—Ä—ñ–≤–Ω—é—î {result:F3}");
        }
    }
}
