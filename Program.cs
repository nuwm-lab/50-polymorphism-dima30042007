using System;

namespace FractionFunctionApp
{
    // üî∏ –ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å
    class FractionFunction
    {
        protected const double EPS = 1e-9;
        protected double a1, a0, b1, b0;

        public FractionFunction(double a1 = 0, double a0 = 0, double b1 = 1, double b0 = 0)
        {
            this.a1 = a1;
            this.a0 = a0;
            this.b1 = b1;
            this.b0 = b0;
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–¥–∞–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤
        public virtual void SetCoefficients()
        {
            Console.Write("–í–≤–µ–¥—ñ—Ç—å a1: "); a1 = double.Parse(Console.ReadLine());
            Console.Write("–í–≤–µ–¥—ñ—Ç—å a0: "); a0 = double.Parse(Console.ReadLine());
            Console.Write("–í–≤–µ–¥—ñ—Ç—å b1: "); b1 = double.Parse(Console.ReadLine());
            Console.Write("–í–≤–µ–¥—ñ—Ç—å b0: "); b0 = double.Parse(Console.ReadLine());
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤
        public virtual void PrintCoefficients()
        {
            Console.WriteLine($"a1 = {a1}, a0 = {a0}, b1 = {b1}, b0 = {b0}");
        }

        // üîπ –î–∏–Ω–∞–º—ñ—á–Ω–∏–π –ø–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º ‚Äî –º–µ—Ç–æ–¥ –±—É–¥–µ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π —É —Å–ø–∞–¥–∫–æ—î–º—Ü—è—Ö
        public virtual double Calculate(double x)
        {
            double denominator = b1 * x + b0;

            if (Math.Abs(denominator) < EPS)
            {
                Console.WriteLine("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –∑–Ω–∞–º–µ–Ω–Ω–∏–∫ –Ω–∞–±–ª–∏–∂–µ–Ω–∏–π –¥–æ –Ω—É–ª—è!");
                return double.NaN;
            }

            return (a1 * x + a0) / denominator;
        }

        public override string ToString()
        {
            return $"f(x) = ({a1}x + {a0}) / ({b1}x + {b0})";
        }
    }

    // üî∏ –ü–æ—Ö—ñ–¥–Ω–∏–π –∫–ª–∞—Å ‚Äî –¥—Ä–æ–±–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è
    class QuadraticFractionFunction : FractionFunction
    {
        private double a2, b2;

        public QuadraticFractionFunction(double a2 = 0, double a1 = 0, double a0 = 0,
                                         double b2 = 0, double b1 = 1, double b0 = 0)
            : base(a1, a0, b1, b0)
        {
            this.a2 = a2;
            this.b2 = b2;
        }

        // –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç–æ–¥—É –¥–ª—è –∑–∞–¥–∞–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤
        public override void SetCoefficients()
        {
            Console.Write("–í–≤–µ–¥—ñ—Ç—å a2: "); a2 = double.Parse(Console.ReadLine());
            Console.Write("–í–≤–µ–¥—ñ—Ç—å a1: "); a1 = double.Parse(Console.ReadLine());
            Console.Write("–í–≤–µ–¥—ñ—Ç—å a0: "); a0 = double.Parse(Console.ReadLine());
            Console.Write("–í–≤–µ–¥—ñ—Ç—å b2: "); b2 = double.Parse(Console.ReadLine());
            Console.Write("–í–≤–µ–¥—ñ—Ç—å b1: "); b1 = double.Parse(Console.ReadLine());
            Console.Write("–í–≤–µ–¥—ñ—Ç—å b0: "); b0 = double.Parse(Console.ReadLine());
        }

        // –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç–æ–¥—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤
        public override void PrintCoefficients()
        {
            Console.WriteLine($"a2 = {a2}, a1 = {a1}, a0 = {a0}, b2 = {b2}, b1 = {b1}, b0 = {b0}");
        }

        // üîπ –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç–æ–¥—É (–¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –ø–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º)
        public override double Calculate(double x)
        {
            double denominator = b2 * x * x + b1 * x + b0;

            if (Math.Abs(denominator) < EPS)
            {
                Console.WriteLine("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –∑–Ω–∞–º–µ–Ω–Ω–∏–∫ –Ω–∞–±–ª–∏–∂–µ–Ω–∏–π –¥–æ –Ω—É–ª—è!");
                return double.NaN;
            }

            return (a2 * x * x + a1 * x + a0) / denominator;
        }

        public override string ToString()
        {
            return $"f(x) = ({a2}x¬≤ + {a1}x + {a0}) / ({b2}x¬≤ + {b1}x + {b0})";
        }

        // üîπ –°—Ç–∞—Ç–∏—á–Ω–∏–π –ø–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º ‚Äî –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤
        public double Calculate(double x, bool absoluteValue)
        {
            double result = Calculate(x);
            return absoluteValue ? Math.Abs(result) : result;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —ñ —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –º–µ—Ç–∞–º–æ—Ä—Ñ—ñ–∑–º—É ===\n");

            Console.WriteLine("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:");
            Console.WriteLine("1 ‚Äî –î—Ä–æ–±–æ–≤–æ-–ª—ñ–Ω—ñ–π–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è");
            Console.WriteLine("2 ‚Äî –î—Ä–æ–±–æ–≤–∞ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è");
            Console.Write("–í–∞—à –≤–∏–±—ñ—Ä: ");
            string userChoose = Console.ReadLine();

            FractionFunction func;

            if (userChoose == "1")
            {
                func = new FractionFunction();
                Console.WriteLine("\n–í–≤–µ–¥—ñ—Ç—å –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –¥–ª—è –¥—Ä–æ–±–æ–≤–æ-–ª—ñ–Ω—ñ–π–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó:");
                func.SetCoefficients();
            }
            else
            {
                func = new QuadraticFractionFunction();
                Console.WriteLine("\n–í–≤–µ–¥—ñ—Ç—å –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –¥–ª—è –¥—Ä–æ–±–æ–≤–æ—ó –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó:");
                func.SetCoefficients();
            }

            Console.WriteLine("\n–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó:");
            func.PrintCoefficients();

            Console.Write("\n–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è x: ");
            double x = double.Parse(Console.ReadLine());

            Console.WriteLine($"\n{func}");
            Console.WriteLine($"f({x}) = {func.Calculate(x):F3}");

            // –°—Ç–∞—Ç–∏—á–Ω–∏–π –ø–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º (–ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è) ‚Äî —Ç—ñ–ª—å–∫–∏ –¥–ª—è QuadraticFractionFunction
            if (func is QuadraticFractionFunction qf)
            {
                Console.WriteLine($"|f({x})| = {qf.Calculate(x, true):F3}");
            }
        }
    }
}
